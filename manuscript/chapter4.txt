# **4. Launch our CloudFormation stacks**


Here comes the infrastructure-as-code! Our whole deployment will be described in one master YAML template, itself referencing *nested stacks* YAML templates to make it more readable and reusable. This is the directory structure of our templates:


![](code/chapterfour1.rb)


And the complete code can be downloaded from GitHub here:


A>## **li0nel/laravelaws**
A>
A> laravelaws - A reference architecture to deploy Laravel on AWS
A>
A> [github.com](https://github.com/)


![](images/fig02.jpeg)


The *vpc.yaml* template defines our *VPC subnets* and *route tables*:


![](code/chapterfour2.rb)


This is quite verbose and everything it takes to set up public and private subnets spanning two AZs. You can see why you wouldn&rsquo;t want to implement this in the AWS console!


We also need three SGs. The first one is to secure our EC2 instances and only allow inbound traffic coming from the load-balancer plus any SSH inbound traffic (remember our instances will be in a private subnet and won&rsquo;t be able to receive traffic from the internet anyway):


![](code/chapterfour3.rb)


The load balancer&rsquo;s SG will allow any traffic from the internet (while only responding to HTTP and HTTPS):


![](code/chapterfour4.rb)


Finally, the database SG only allows ingress traffic on MySQL port and coming from our EC2 instances, and nothing from the internet. Our database will also be hosted inside our private subnets so it can&rsquo;t receive any traffic from outside the VPC.


![](code/chapterfour5.rb)


Let&rsquo;s now launch our *storage.yaml* stack:


![](code/chapterfour6.rb)


Plus one public-read S3 bucket:


![](code/chapterfour7.rb)


The *web.yaml* stack is composed of one ECS cluster and a Launch Configuration for our instances. The LC defines the bootstrap code to execute on each new instance at launch, this is called the User Data. We use here a third-party Docker credential helper that authenticates the Docker client to our ECR registry by turning the instance&rsquo;s IAM role into security tokens.


![](code/chapterfour8.rb)


![](code/chapterfour9.rb)


![](code/chapterfour10.rb)


![](code/chapterfour11.rb)


In more complex setups, we can have our freshly created load balancer registering itself to Route53 so that your service is always available at the same DNS address. This design pattern is called *service discovery* and is not possible in CloudFormation out of the box. Instead, we will manually point our domain name to our load-balancer on Route53 in step 7 below.


In the meantime, our load balancer responds with an HTTP 503 error since it can&rsquo;t find a single healthy instance returning a correct HTTP status code in our cluster pool. Of course, this will change as soon as we deploy our application in our cluster.


![Our load balancer responding but with no healthy container instances behind it](images/fig04.png)

